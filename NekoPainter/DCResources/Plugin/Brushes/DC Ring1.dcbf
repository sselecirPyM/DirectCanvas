<?xml version="1.0" encoding="utf-8"?>
<Brush>
  <Name>图案-圆1</Name>
  <Description>圆平铺效果。颜色2为圆内颜色</Description>
  <BrushSize>100</BrushSize>
  <Parameters>
    <Parameter Name="spacing" Index="0">
      <Description>圆与圆之间的距离</Description>
      <Value>40</Value>
    </Parameter>
    <Parameter Name="size" Index="1">
      <Description>圆的大小</Description>
      <Value>40</Value>
    </Parameter>
    <Parameter Name="rotation" Index="4" Type="fTextBox">
      <Description>旋转的角度</Description>
    </Parameter>
    <Parameter Name="offsetX" Index="6" Type="fTextBox">
      <Description></Description>
    </Parameter>
    <Parameter Name="offsetY" Index="7" Type="fTextBox">
      <Description></Description>
    </Parameter>
    <Parameter Name="hard_soft" Index="15" Type="Slider" MaxValue="100" MinValue="0">
      <Description>画笔边缘的软硬程度。100为软画笔。</Description>
    </Parameter>
  </Parameters>
  <Code>
    float4 StandardBrush(float4 bufferColor, uint2 position, float4 color,float hs)
    {
    float2 mp = InputDatas[0].Position.xy - InputDatas[1].Position.xy;
    float mrad = atan2(mp.y, mp.x);
    float4x4 transform9 =
    {
    cos(mrad),-sin(mrad),0.0f,0.0f,
    sin(mrad),cos(mrad),0.0f,0.0f,
    0.0f,0.0f,1.0f,0.0f,
    0.0f,0.0f,0.0f,1.0f
    };
    float4 rPos = mul(float4(position + float2(0.5f, 0.5f) - InputDatas[1].Position.xy, 0, 1), transform9);
    float rSize = BrushSize * InputDatas[0].Pressure;
    float rl = sqrt(saturate(1 - (rPos.y / rSize)*(rPos.y / rSize)));
    float rl2 = rl * rSize;
    float rDistance = (1 - saturate((-rPos.x + rl2) / rl2 * 0.5f) - saturate((rPos.x - length(mp) + rl2) / rl2 * 0.5f));
    color.a = (1 - pow(2.718281828f, (rl*hs + 1.0f - hs)*log(1.0f - color.a*0.99999f)*rDistance));

    if (abs(rPos.y) &lt;= rSize &amp;&amp; rPos.x &gt;= 0 &amp;&amp; rPos.x &lt;= length(mp) || distance(rPos, float2(0, 0))&lt;= rSize || distance(rPos, float2(length(mp), 0)) &lt;= rSize)
    {
    if (color.a &gt; 0.00000001f)
    {
    float aalpha = 1 - (1 - bufferColor.a)*(1 - color.a);
    color = float4(bufferColor.rgb*(1 - color.a)*(bufferColor.a) / aalpha + color.rgb*color.a / aalpha, aalpha);
    }
    else
    {
    color = bufferColor;
    }
    }
    else
    {
    color = bufferColor;
    }
    return color;
    }
    
    float4 brush(float4 bufferColor, uint2 position)
    {
    float4 color = BrushColor;
    float2 m0 = float2(P_spacing*1.7320508f,P_spacing*3.0f);
    float2 m1 = m0*0.5f;
    float rad = asfloat(P_rotation)*0.017453292f;
    float4x4 transform0=
    {
    cos(rad),-sin(rad),0.0f,0.0f,
    sin(rad),cos(rad),0.0f,0.0f,
    0.0f,0.0f,1.0f,0.0f,
    0.0f,0.0f,0.0f,1.0f
    };
    float2 xPos=mul(position-float2(P_offsetX,P_offsetY),transform0).xy;
    float2 ingrid = (xPos%m0+m0)%m0-m1;
    if(length(ingrid) &lt; P_size*0.5f)
    {
    color = BrushColor2;
    }
    ingrid = (((xPos+float2(P_spacing*0.86602540f,P_spacing*1.5f))%m0)+m0)%m0-m1;
    if(length(ingrid) &lt; P_size*0.5f)
    {
    color = BrushColor2;
    }
    return StandardBrush(bufferColor,position,color,P_hard_soft*0.01f);
    }
  </Code>
</Brush>